import { Page } from 'playwright';
import { BotConfig } from '../bot';

export class GoogleMeetBot {
  constructor(private page: Page, private config: BotConfig) {}

  private isValidMeetUrl(url: string): boolean {
    try {
      const urlObj = new URL(url);
      return urlObj.hostname === 'meet.google.com' && urlObj.pathname.length > 1;
    } catch {
      return false;
    }
  }

  private randomDelay(baseMs: number): number {
    return baseMs + Math.random() * 1000;
  }

  // Implementaci√≥n exacta basada en Vexa.ai que funciona
  async join(): Promise<void> {
    console.log('üîó Navegando a Google Meet...');
    
    try {
      // Validar URL antes de navegar
      if (!this.isValidMeetUrl(this.config.meetingUrl)) {
        throw new Error(`URL de meeting inv√°lida: ${this.config.meetingUrl}`);
      }

      console.log(`üìç Accediendo a: ${this.config.meetingUrl}`);
      
      // Navegaci√≥n exacta como Vexa
      await this.page.goto(this.config.meetingUrl, { 
        waitUntil: 'networkidle'
      });
      await this.page.bringToFront();

      // Espera cr√≠tica de Vexa - permite que los elementos se estabilicen
      console.log('‚è≥ Esperando que los elementos de la p√°gina se estabilicen...');
      await this.page.waitForTimeout(5000); // 5 segundos fijos

      // Ejecutar la l√≥gica de uni√≥n de Vexa
      await this.joinMeetingVexa();

      // Esperar admisi√≥n a la reuni√≥n
      await this.waitForMeetingAdmission();

      console.log('‚úÖ Bot se uni√≥ exitosamente a la reuni√≥n');

    } catch (error) {
      console.error('‚ùå Error uni√©ndose a Google Meet:', error);
      throw error;
    }
  }

  // Implementaci√≥n exacta de joinMeeting de Vexa.ai
  private async joinMeetingVexa(): Promise<void> {
    // Selectores exactos de Vexa que est√°n probados y funcionan
    const enterNameField = 'input[type="text"][aria-label="Your name"]';
    const joinButton = '//button[.//span[text()="Ask to join"]]';
    const muteButton = '[aria-label*="Turn off microphone"]';
    const cameraOffButton = '[aria-label*="Turn off camera"]';

    // Enter name and join - implementaci√≥n exacta de Vexa
    await this.page.waitForTimeout(this.randomDelay(1000));
    console.log('üîç Intentando encontrar campo de entrada de nombre...');
    
    // Timeout extendido cr√≠tico - Vexa usa 120 segundos
    await this.page.waitForSelector(enterNameField, { timeout: 120000 });
    console.log('‚úÖ Campo de entrada de nombre encontrado.');

    await this.page.waitForTimeout(this.randomDelay(1000));
    await this.page.fill(enterNameField, this.config.botName);

    // Mutear micr√≥fono y c√°mara si est√°n disponibles - exactamente como Vexa
    try {
      await this.page.waitForTimeout(this.randomDelay(500));
      await this.page.click(muteButton, { timeout: 200 });
      await this.page.waitForTimeout(200);
    } catch (e) {
      console.log('üé§ Micr√≥fono ya muteado o no encontrado.');
    }
    
    try {
      await this.page.waitForTimeout(this.randomDelay(500));
      await this.page.click(cameraOffButton, { timeout: 200 });
      await this.page.waitForTimeout(200);
    } catch (e) {
      console.log('üìπ C√°mara ya desactivada o no encontrada.');
    }

    // Hacer clic en el bot√≥n de unirse usando XPath como Vexa
    await this.page.waitForSelector(joinButton, { timeout: 60000 });
    await this.page.click(joinButton);
    console.log(`üöÄ ${this.config.botName} se uni√≥ a la reuni√≥n.`);
  }

  // Funci√≥n de espera de admisi√≥n de Vexa
  private async waitForMeetingAdmission(): Promise<boolean> {
    const leaveButton = `//button[@aria-label="Leave call"]`;
    
    try {
      // Vexa espera hasta 5 minutos para ser admitido
      await this.page.waitForSelector(leaveButton, { timeout: 300000 });
      console.log('‚úÖ Admitido exitosamente en la reuni√≥n');
      return true;
    } catch {
      throw new Error('Bot no fue admitido en la reuni√≥n dentro del tiempo l√≠mite');
    }
  }

  // M√©todos adicionales para compatibilidad
  async getParticipants(): Promise<string[]> {
    try {
      const participantElements = await this.page.$$('div[data-participant-id]');
      const participants: string[] = [];
      
      for (const element of participantElements) {
        const nameElement = await element.$('.notranslate');
        if (nameElement) {
          const name = await nameElement.textContent();
          if (name && name.trim()) {
            participants.push(name.trim());
          }
        }
      }
      
      return participants;
    } catch (error) {
      console.log(`Error obteniendo participantes: ${error}`);
      return [];
    }
  }

  async isMeetingActive(): Promise<boolean> {
    try {
      const leaveButton = await this.page.$(`//button[@aria-label="Leave call"]`);
      return leaveButton !== null;
    } catch {
      return false;
    }
  }

  async leave(): Promise<void> {
    console.log('üö™ Saliendo de la reuni√≥n...');
    
    try {
      const leaveButton = `//button[@aria-label="Leave call"]`;
      const leaveButtonElement = await this.page.$(leaveButton);
      
      if (leaveButtonElement) {
        await leaveButtonElement.click();
        console.log('‚úÖ Bot√≥n de salir clickeado');
        
        // Esperar por posible bot√≥n de confirmaci√≥n
        await this.page.waitForTimeout(1000);
        
        const confirmButton = await this.page.$('//button[.//span[text()="Leave meeting"]] | //button[.//span[text()="Just leave the meeting"]]');
        if (confirmButton) {
          await confirmButton.click();
          console.log('‚úÖ Confirmaci√≥n de salida clickeada');
        }
        
        console.log('‚úÖ Bot sali√≥ de la reuni√≥n exitosamente');
      } else {
        console.log('‚ö†Ô∏è Bot√≥n de salir no encontrado');
      }
    } catch (error) {
      console.error(`‚ùå Error saliendo de la reuni√≥n: ${error}`);
      throw error;
    }
  }
}
