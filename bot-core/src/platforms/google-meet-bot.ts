import { Page } from 'playwright';
import { BaseBot } from '../core/base-bot';
import { BotConfig } from '../types/bot.types';
import { GoogleMeetJoinModule } from './google-meet/join';
import { WhisperTranscriptionModule } from '../modules/whisper-transcription-module';
import { GoogleMeetRecordingModule } from './google-meet/recording';
import { GoogleMeetMonitoringModule } from './google-meet/monitoring';

export class GoogleMeetBot extends BaseBot {
  private joinModule: GoogleMeetJoinModule | null = null;
  private transcriptionModule: WhisperTranscriptionModule | null = null;
  private recordingModule: GoogleMeetRecordingModule | null = null;
  private monitoringModule: GoogleMeetMonitoringModule | null = null;

  constructor(config: BotConfig) {
    super(config);
  }

  async joinMeeting(): Promise<void> {
    if (!this.page) throw new Error('Page no inicializada');

    console.log('üîó Iniciando proceso de uni√≥n a Google Meet...');
    
    // Crear m√≥dulo de uni√≥n
    this.joinModule = new GoogleMeetJoinModule(this.page, this.config);
    
    try {
      // Unirse a la reuni√≥n
      await this.joinModule.joinMeeting();
      
      // Actualizar estado de la sesi√≥n
      this.sessionManager.updateSessionStatus('joined');
      
      // Inicializar m√≥dulos adicionales
      await this.initializeModules();
      
      // Mantener la sesi√≥n activa
      this.startSessionKeepAlive();
      
      console.log('‚úÖ Google Meet Bot unido exitosamente');
      this.emit('joined');
      
    } catch (error) {
      this.sessionManager.updateSessionStatus('error');
      console.error('‚ùå Error uni√©ndose a Google Meet:', error);
      this.emit('joinError', error);
      throw error;
    }
  }

  private async initializeModules(): Promise<void> {
    if (!this.page) return;

    console.log('üîß Inicializando m√≥dulos del bot...');

    // Inicializar grabaci√≥n y transcripci√≥n con Whisper
    await this.initializeRecordingAndTranscription();

    // Inicializar monitoreo
    await this.initializeMonitoring();

    console.log('‚úÖ M√≥dulos inicializados');
  }

  private async initializeRecordingAndTranscription(): Promise<void> {
    if (!this.page) return;

    try {
      console.log('ÔøΩ Inicializando grabaci√≥n y transcripci√≥n con Whisper...');
      
      // Inicializar m√≥dulo de grabaci√≥n
      this.recordingModule = new GoogleMeetRecordingModule(this.page, {
        enableVideo: true,
        enableAudio: true,
        quality: 'medium',
        format: 'mp4'
      });

      // Inicializar m√≥dulo de transcripci√≥n Whisper
      this.transcriptionModule = new WhisperTranscriptionModule(this.page, {
        apiKey: process.env.OPENAI_API_KEY || '',
        model: 'gpt-4o-transcribe',
        language: 'es',
        prompt: 'Esta es una reuni√≥n de negocios en espa√±ol. Por favor transcribe con precisi√≥n los nombres propios y t√©rminos t√©cnicos.'
      });

      // Configurar eventos de grabaci√≥n
      this.recordingModule.on('recordingStarted', (info: any) => {
        console.log('üé¨ Grabaci√≥n iniciada:', info);
        this.emit('recordingStarted', info);
      });

      this.recordingModule.on('recordingStopped', (info: any) => {
        console.log('‚èπÔ∏è Grabaci√≥n detenida:', info);
        this.emit('recordingStopped', info);
      });

      this.recordingModule.on('recordingCompleted', async (result: any) => {
        console.log('‚úÖ Grabaci√≥n completada:', result);
        
        // Procesar audio con Whisper si existe
        if (result.audioPath && result.success) {
          try {
            console.log('üéµ Procesando audio con Whisper...');
            await this.transcriptionModule?.transcribeAudioFile(result.audioPath);
            
            // Cleanup del archivo de audio despu√©s del procesamiento
            await this.transcriptionModule?.cleanupAudioFile();
            
            this.emit('transcriptionCompleted', this.transcriptionModule?.getTranscriptions());
          } catch (error) {
            console.error('‚ùå Error procesando audio con Whisper:', error);
            this.emit('transcriptionError', error);
          }
        }
        
        this.emit('recordingCompleted', result);
      });

      // Configurar eventos de transcripci√≥n
      this.transcriptionModule.on('transcriptionAdded', (entry: any) => {
        this.sessionManager.addTranscriptionEntry(entry);
        this.emit('transcriptionUpdate', entry);
      });

      this.transcriptionModule.on('error', (error: any) => {
        console.error('Error en transcripci√≥n Whisper:', error);
        this.emit('transcriptionError', error);
      });

      // Iniciar grabaci√≥n autom√°ticamente
      await this.recordingModule.startRecording();
      await this.transcriptionModule.startTranscription();
      
      this.sessionManager.updateSessionStatus('recording');
      
      console.log('‚úÖ Grabaci√≥n y transcripci√≥n iniciadas');
    } catch (error) {
      console.error('‚ùå Error inicializando grabaci√≥n y transcripci√≥n:', error);
      // No lanzar error para que el bot pueda continuar
    }
  }

  private async initializeMonitoring(): Promise<void> {
    if (!this.page) return;

    try {
      console.log('üëÅÔ∏è Inicializando m√≥dulo de monitoreo...');
      
      this.monitoringModule = new GoogleMeetMonitoringModule(this.page, {
        participantCheckInterval: 30000,
        meetingStatusCheckInterval: 30000
      });

      // Configurar eventos
      this.monitoringModule.on('participantsUpdated', (participants) => {
        this.sessionManager.updateParticipants(participants);
        this.emit('participantsUpdate', participants);
      });

      this.monitoringModule.on('meetingEnded', () => {
        console.log('üìû Reuni√≥n terminada detectada por monitoreo');
        this.endSession();
      });

      this.monitoringModule.on('error', (error) => {
        console.error('Error en monitoreo:', error.error);
        this.emit('monitoringError', error);
      });

      // Iniciar monitoreo
      this.monitoringModule.startMonitoring();
      
      console.log('‚úÖ M√≥dulo de monitoreo iniciado');
    } catch (error) {
      console.error('‚ùå Error inicializando monitoreo:', error);
    }
  }

  // M√©todos p√∫blicos para grabaci√≥n y transcripci√≥n
  async toggleRecording(enable: boolean): Promise<void> {
    if (!this.recordingModule) {
      console.log('‚ö†Ô∏è M√≥dulo de grabaci√≥n no inicializado');
      return;
    }

    if (enable && !this.recordingModule.isRecordingActive()) {
      await this.recordingModule.startRecording();
      this.sessionManager.updateSessionStatus('recording');
      console.log('‚úÖ Grabaci√≥n habilitada');
    } else if (!enable && this.recordingModule.isRecordingActive()) {
      const result = await this.recordingModule.stopRecording();
      this.sessionManager.updateSessionStatus('joined');
      
      // Procesar audio con Whisper autom√°ticamente
      if (result.audioPath && result.success && this.transcriptionModule) {
        try {
          await this.transcriptionModule.transcribeAudioFile(result.audioPath);
          console.log('‚úÖ Audio procesado con Whisper');
        } catch (error) {
          console.error('‚ùå Error procesando audio:', error);
        }
      }
      
      console.log('‚è∏Ô∏è Grabaci√≥n detenida');
    }
  }

  async toggleTranscription(enable: boolean): Promise<void> {
    console.log('‚ÑπÔ∏è Transcripci√≥n est√° integrada con grabaci√≥n. Use toggleRecording() en su lugar.');
  }

  getTranscriptions() {
    return this.transcriptionModule?.getTranscriptions() || [];
  }

  getTranscriptionStats() {
    return this.transcriptionModule?.getStats() || null;
  }

  getTranscriptionSummary() {
    return this.transcriptionModule?.getTranscriptionSummary() || null;
  }

  exportTranscriptionToText(): string {
    return this.transcriptionModule?.exportToText() || 'No hay transcripciones disponibles';
  }

  exportTranscriptionToJSON(): string {
    return this.transcriptionModule?.exportToJSON() || '[]';
  }

  // M√©todos para el m√≥dulo de grabaci√≥n
  getRecordingStats() {
    return this.recordingModule?.getRecordingStats() || null;
  }

  isRecordingActive(): boolean {
    return this.recordingModule?.isRecordingActive() || false;
  }

  getRecordingDirectory(): string {
    return this.recordingModule?.getRecordingDirectory() || '';
  }

  // M√©todos p√∫blicos para monitoreo
  async getParticipants(): Promise<string[]> {
    return this.monitoringModule?.getParticipants() || [];
  }

  async isMeetingActive(): Promise<boolean> {
    return this.monitoringModule?.isMeetingActive() || false;
  }

  async getMeetingInfo() {
    return this.monitoringModule?.getMeetingInfo() || null;
  }

  async getNetworkQuality() {
    return this.monitoringModule?.getNetworkQuality() || 'unknown';
  }

  // Mantener la sesi√≥n activa
  private startSessionKeepAlive(): void {
    if (!this.page) return;

    console.log('üîÑ Iniciando keep-alive para mantener la sesi√≥n activa...');
    
    // Verificar cada 30 segundos que la p√°gina sigue activa
    const keepAliveInterval = setInterval(async () => {
      try {
        if (!this.isActive() || !this.page) {
          clearInterval(keepAliveInterval);
          return;
        }

        // Verificar que la p√°gina no se haya cerrado
        const isConnected = await this.page.evaluate(() => {
          return document.readyState === 'complete' && !document.hidden;
        });

        if (!isConnected) {
          console.log('‚ö†Ô∏è P√°gina desconectada, intentando reconectar...');
          clearInterval(keepAliveInterval);
          this.emit('connectionLost');
          return;
        }

        // Verificar que estamos en la reuni√≥n
        const currentUrl = this.page.url();
        if (!currentUrl.includes('meet.google.com')) {
          console.log('‚ö†Ô∏è Ya no estamos en Google Meet');
          clearInterval(keepAliveInterval);
          this.emit('leftMeeting');
          return;
        }

        // Peque√±a actividad para mantener la sesi√≥n viva
        await this.page.evaluate(() => {
          // Mover un poco el mouse virtualmente
          document.dispatchEvent(new MouseEvent('mousemove', {
            clientX: Math.random() * 10,
            clientY: Math.random() * 10
          }));
        });

      } catch (error) {
        console.log('‚ö†Ô∏è Error en keep-alive:', error);
      }
    }, 30000); // Cada 30 segundos

    console.log('‚úÖ Keep-alive iniciado');
  }

  // Cleanup mejorado
  protected async cleanup(): Promise<void> {
    console.log('üßπ Limpiando recursos de Google Meet Bot...');
    
    try {
      // Detener grabaci√≥n si est√° activa
      if (this.recordingModule && this.recordingModule.isRecordingActive()) {
        await this.recordingModule.stopRecording();
        console.log('‚úÖ Grabaci√≥n detenida');
      }

      // Detener monitoreo
      if (this.monitoringModule && this.monitoringModule.isMonitoringActive()) {
        this.monitoringModule.stopMonitoring();
        console.log('‚úÖ Monitoreo detenido');
      }

      // Cleanup de m√≥dulos
      // Los m√≥dulos se limpian autom√°ticamente al detener sus procesos

      // Cleanup del bot base
      await super.cleanup();
      
    } catch (error) {
      console.error('Error en cleanup de Google Meet Bot:', error);
    }
  }

  // Informaci√≥n completa del estado del bot
  async getDetailedStatus() {
    const baseStatus = await this.getStatus();
    
    return {
      ...baseStatus,
      modules: {
        recording: {
          active: this.recordingModule?.isRecordingActive() || false,
          stats: this.recordingModule?.getRecordingStats() || null,
          directory: this.recordingModule?.getRecordingDirectory() || null
        },
        transcription: {
          active: false, // Whisper procesa post-reuni√≥n
          stats: this.transcriptionModule?.getStats() || null
        },
        monitoring: {
          active: this.monitoringModule?.isMonitoringActive() || false,
          stats: this.monitoringModule?.getMonitoringStats() || null
        }
      },
      meetingInfo: await this.getMeetingInfo(),
      networkQuality: await this.getNetworkQuality()
    };
  }
}
