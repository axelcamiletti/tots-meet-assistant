"use strict";
/**
 * Test COMPLETO de transcripci√≥n en reuni√≥n REAL
 * Conecta a tu reuni√≥n de Google Meet y prueba grabaci√≥n + transcripci√≥n
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testRealMeeting = testRealMeeting;
// Cargar variables de entorno
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config();
const google_meet_bot_1 = require("../src/platforms/google-meet-bot");
function testRealMeeting() {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        console.log('üéØ INICIANDO TEST EN REUNI√ìN REAL');
        console.log('='.repeat(60));
        console.log('üì∫ Se abrir√° un navegador y se conectar√° a tu reuni√≥n');
        console.log('üé§ Aseg√∫rate de estar en la reuni√≥n y hablar algo');
        console.log('='.repeat(60));
        const bot = new google_meet_bot_1.GoogleMeetBot({
            meetingUrl: 'https://meet.google.com/dvw-akbq-qxv',
            botName: 'TOTS-Transcription-Bot',
            headless: false, // Ver el navegador
            audioEnabled: true,
            videoEnabled: false
        });
        try {
            console.log('');
            console.log('üöÄ PASO 1: Iniciando bot y conectando a Google Meet...');
            console.log('‚è≥ Esto puede tomar unos segundos...');
            // Inicializar el bot primero
            yield bot.start();
            console.log('‚úÖ Bot iniciado exitosamente');
            console.log('‚úÖ Navegador abierto y conectado a la reuni√≥n');
            // Esperar para estabilizar conexi√≥n
            console.log('‚è≥ Esperando 5 segundos para estabilizar conexi√≥n...');
            yield new Promise(resolve => setTimeout(resolve, 5000));
            console.log('');
            console.log('üîç PASO 2: Verificando estado de la reuni√≥n...');
            const isMeetingActive = yield bot.isMeetingActive();
            console.log(`üìä Reuni√≥n activa: ${isMeetingActive ? '‚úÖ S√ç' : '‚ùå NO'}`);
            const participants = yield bot.getParticipants();
            console.log(`üë• Participantes detectados: ${participants.length}`);
            if (participants.length > 0) {
                participants.forEach((p, i) => console.log(`   ${i + 1}. ${p}`));
            }
            console.log('');
            console.log('üî¥ PASO 3: Iniciando grabaci√≥n con micr√≥fono...');
            console.log('‚ö†Ô∏è  IMPORTANTE: Se solicitar√°n permisos para usar el micr√≥fono');
            console.log('   üëÜ Acepta los permisos de micr√≥fono en el navegador');
            console.log('   üé§ El bot capturar√° audio del micr√≥fono del sistema');
            yield bot.toggleRecording(true);
            const isRecording = bot.isRecordingActive();
            if (isRecording) {
                console.log('‚úÖ ¬°Grabaci√≥n iniciada exitosamente!');
                console.log('');
                console.log('üé§ PASO 4: Grabando audio por 15 segundos...');
                console.log('üí¨ HABLA ALGO EN LA REUNI√ìN AHORA');
                console.log('üì¢ Prueba decir: "Hola, este es un test de transcripci√≥n"');
                // Countdown visual
                for (let i = 15; i > 0; i--) {
                    console.log(`‚è∞ ${i} segundos restantes... ${i <= 5 ? 'üî•' : '‚è≥'}`);
                    yield new Promise(resolve => setTimeout(resolve, 1000));
                }
                console.log('');
                console.log('‚èπÔ∏è PASO 5: Deteniendo grabaci√≥n...');
                yield bot.toggleRecording(false);
                console.log('‚úÖ Grabaci√≥n detenida');
                console.log('');
                console.log('ü§ñ PASO 6: Procesando con Whisper AI...');
                console.log('‚è≥ Esto puede tomar unos segundos...');
                // Esperar procesamiento
                yield new Promise(resolve => setTimeout(resolve, 8000));
                console.log('');
                console.log('üìù PASO 7: Obteniendo resultados...');
                const transcriptions = bot.getTranscriptions();
                const stats = bot.getTranscriptionStats();
                console.log('='.repeat(60));
                console.log('üéâ RESULTADOS DE LA TRANSCRIPCI√ìN');
                console.log('='.repeat(60));
                if (transcriptions && transcriptions.length > 0) {
                    console.log(`‚úÖ Transcripciones obtenidas: ${transcriptions.length}`);
                    console.log('');
                    transcriptions.forEach((t, index) => {
                        console.log(`üìù ${index + 1}. [${new Date(t.timestamp).toLocaleTimeString()}]`);
                        console.log(`üë§ Hablante: ${t.speaker}`);
                        console.log(`üí¨ Texto: "${t.text}"`);
                        if (t.confidence) {
                            console.log(`üéØ Confianza: ${Math.round(t.confidence * 100)}%`);
                        }
                        console.log('‚îÄ'.repeat(50));
                    });
                    console.log('');
                    console.log('üìä ESTAD√çSTICAS:');
                    if (stats) {
                        console.log(`üìà Total de transcripciones: ${stats.totalEntries || transcriptions.length}`);
                        console.log(`üé§ Hablantes √∫nicos: ${stats.uniqueSpeakers || new Set(transcriptions.map(t => t.speaker)).size}`);
                        console.log(`üë• Hablantes: ${((_a = stats.speakers) === null || _a === void 0 ? void 0 : _a.join(', ')) || 'N/A'}`);
                    }
                    console.log('');
                    console.log('üìÑ EXPORTACI√ìN COMPLETA:');
                    console.log('‚îÄ'.repeat(50));
                    const fullText = bot.exportTranscriptionToText();
                    console.log(fullText);
                    console.log('‚îÄ'.repeat(50));
                    console.log('');
                    console.log('üéâ ¬°TRANSCRIPCI√ìN EXITOSA!');
                    console.log('‚úÖ El bot puede capturar audio real de Google Meet');
                    console.log('‚úÖ Whisper AI proces√≥ el audio correctamente');
                    console.log('‚úÖ Sistema completamente funcional');
                }
                else {
                    console.log('‚ùå No se obtuvieron transcripciones');
                    console.log('');
                    console.log('üîç Posibles causas:');
                    console.log('   ‚Ä¢ No hubo audio en la reuni√≥n');
                    console.log('   ‚Ä¢ Los permisos de audio no se otorgaron');
                    console.log('   ‚Ä¢ Error en el procesamiento de Whisper');
                    console.log('   ‚Ä¢ Problema de conectividad');
                    console.log('');
                    console.log('üõ†Ô∏è Para debuggear:');
                    console.log('   1. Verifica que otorgaste permisos de audio');
                    console.log('   2. Aseg√∫rate de que hay audio en la reuni√≥n');
                    console.log('   3. Revisa la configuraci√≥n de OpenAI API Key');
                }
            }
            else {
                console.log('‚ùå No se pudo iniciar la grabaci√≥n');
                console.log('üîç Verifica que otorgaste los permisos de captura de pantalla');
            }
            console.log('');
            console.log('üìÇ ARCHIVOS GENERADOS:');
            const recordingDir = bot.getRecordingDirectory();
            console.log(`üìÅ Directorio: ${recordingDir}`);
        }
        catch (error) {
            console.error('');
            console.error('‚ùå ERROR EN LA PRUEBA:', error);
            console.error('');
            if (error instanceof Error) {
                if (error.message.includes('navigation')) {
                    console.log('üí° Posible problema de navegaci√≥n - verifica la URL de la reuni√≥n');
                }
                else if (error.message.includes('permission')) {
                    console.log('üí° Problema de permisos - aseg√∫rate de otorgar acceso a la pantalla/audio');
                }
                else if (error.message.includes('timeout')) {
                    console.log('üí° Timeout - la reuni√≥n puede estar inactiva o tener problemas de conexi√≥n');
                }
            }
            throw error;
        }
        finally {
            console.log('');
            console.log('üîÑ Cerrando navegador...');
            try {
                // Intentar cerrar limpiamente
                if (typeof bot.cleanup === 'function') {
                    yield bot.cleanup();
                }
            }
            catch (closeError) {
                console.log('‚ö†Ô∏è Error cerrando:', closeError);
            }
            console.log('‚úÖ Test completado');
        }
    });
}
// Ejecutar test
if (require.main === module) {
    console.log('üö® PREPARACI√ìN PARA EL TEST:');
    console.log('1. ‚úÖ Aseg√∫rate de estar en la reuni√≥n: https://meet.google.com/dvw-akbq-qxv');
    console.log('2. ‚úÖ Ten lista la API Key de OpenAI (para Whisper)');
    console.log(`3. üîë API Key detectada: ${process.env.OPENAI_API_KEY ? '‚úÖ S√ç (' + process.env.OPENAI_API_KEY.substring(0, 10) + '...)' : '‚ùå NO'}`);
    console.log('4. ‚úÖ Prep√°rate para otorgar permisos de captura de pantalla');
    console.log('');
    console.log('‚è∞ Iniciando en 3 segundos...');
    setTimeout(() => {
        testRealMeeting().catch(error => {
            console.error('üí• TEST FALL√ì:', error);
            process.exit(1);
        });
    }, 3000);
}
