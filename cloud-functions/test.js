// Cargar variables de entorno desde .env
require('dotenv').config();

const admin = require('firebase-admin');

// Mock data para pruebas
const mockMeetingData = {
  meetingId: 'test-meeting-123',
  meetingTitle: 'Reuni√≥n de planificaci√≥n Q1 2024',
  transcript: 'Buenos d√≠as equipo. Hoy vamos a revisar los objetivos para el primer trimestre. Tenemos que definir las prioridades del producto y asignar recursos. Mar√≠a, ¬øpodr√≠as encargarte del an√°lisis de mercado? Juan, necesitamos que revises la arquitectura t√©cnica. Tambi√©n debemos programar una reuni√≥n con el cliente la pr√≥xima semana.',
  highlights: [
    {
      type: 'objetivo',
      text: 'Definir prioridades del producto para Q1',
      timestamp: 1234567890
    },
    {
      type: 'tarea',
      text: 'Mar√≠a - an√°lisis de mercado',
      timestamp: 1234567920
    },
    {
      type: 'tarea', 
      text: 'Juan - revisar arquitectura t√©cnica',
      timestamp: 1234567950
    },
    {
      type: 'pregunta',
      text: '¬øCu√°ndo programar reuni√≥n con cliente?',
      timestamp: 1234567980
    }
  ],
  meetingUrl: 'https://meet.google.com/abc-def-ghi',
  userEmail: 'test@tots.agency',
  userId: 'test-user-123'
};

// Importar funciones directamente desde index.js
const functions = require('./index.js');

// Funci√≥n de prueba para generar resumen
async function testSummaryGeneration() {
  console.log('üß™ Probando generaci√≥n de resumen con OpenAI...\n');
  
  try {
    // Simular llamada HTTP a generateSummary
    const mockReq = {
      method: 'POST',
      headers: {
        authorization: 'Bearer mock-token',
        origin: 'http://localhost:4200'
      },
      body: {
        meetingDocId: 'mock-doc-id'
      }
    };

    console.log('üìù Simulando generaci√≥n de resumen...');
    console.log('‚úÖ Mock data preparado para prueba');
    console.log('ÔøΩ Transcript length:', mockMeetingData.transcript.length);
    console.log('üéØ Highlights count:', mockMeetingData.highlights.length);
    
    // Test b√°sico de m√©tricas
    const duration = Math.round(mockMeetingData.transcript.split(' ').length / 150);
    console.log('‚è±Ô∏è Estimated duration:', duration, 'minutes');
    
  } catch (error) {
    console.error('‚ùå Error en prueba:', error.message);
  }
}

// Funci√≥n de prueba para verificar configuraci√≥n
async function testConfiguration() {
  console.log('\nüîß Verificando configuraci√≥n...\n');
  
  // Verificar variables de entorno
  const requiredEnvVars = [
    'FIREBASE_PROJECT_ID',
    'FIREBASE_CLIENT_EMAIL', 
    'OPENAI_API_KEY'
  ];
  
  let allConfigured = true;
  
  requiredEnvVars.forEach(varName => {
    if (process.env[varName]) {
      console.log(`‚úÖ ${varName}: Configurada`);
    } else {
      console.log(`‚ùå ${varName}: No configurada`);
      allConfigured = false;
    }
  });
  
  if (allConfigured) {
    console.log('\nüéâ ¬°Todas las variables de entorno est√°n configuradas!');
  } else {
    console.log('\n‚ö†Ô∏è  Faltan algunas variables de entorno.');
  }
  
  return allConfigured;
}

// Funci√≥n de prueba para conectividad OpenAI
async function testOpenAIConnection() {
  console.log('\nü§ñ Probando conectividad con OpenAI...\n');
  
  if (!process.env.OPENAI_API_KEY) {
    console.log('‚ùå OPENAI_API_KEY no configurada');
    return false;
  }
  
  try {
    const OpenAI = require('openai');
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
    
    console.log('üì° Haciendo prueba de conexi√≥n a OpenAI...');
    
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'user',
          content: 'Responde solo con "CONECTADO" si puedes leer este mensaje.'
        }
      ],
      max_tokens: 10
    });
    
    const response = completion.choices[0].message.content.trim();
    
    if (response.includes('CONECTADO')) {
      console.log('‚úÖ Conexi√≥n exitosa con OpenAI');
      console.log('üìä Modelo utilizado:', completion.model);
      return true;
    } else {
      console.log('‚ö†Ô∏è  Respuesta inesperada de OpenAI:', response);
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Error conectando con OpenAI:', error.message);
    return false;
  }
}

// Ejecutar pruebas si el archivo se ejecuta directamente
if (require.main === module) {
  console.log('üöÄ Iniciando pruebas de TOTS Meet Assistant...\n');
  
  testConfiguration()
    .then(configOk => {
      if (configOk) {
        return testOpenAIConnection();
      }
      return false;
    })
    .then(openaiOk => {
      if (openaiOk) {
        return testSummaryGeneration();
      } else {
        console.log('\n‚ö†Ô∏è  Saltando pruebas de resumen debido a problemas de configuraci√≥n');
      }
    })
    .then(() => {
      console.log('\n‚úÖ Pruebas completadas');
      console.log('\nüìã Pr√≥ximos pasos:');
      console.log('1. Ejecutar: npm run serve (para probar emuladores)');
      console.log('2. Probar endpoints con Postman/curl');
      console.log('3. Continuar con desarrollo de extensi√≥n Chrome');
    })
    .catch(error => {
      console.error('\n‚ùå Error en pruebas:', error);
    });
}

module.exports = {
  testSummaryGeneration,
  testConfiguration,
  testOpenAIConnection,
  mockMeetingData
};
